#include <bits/stdc++.h> 
long long merge(long long *arr,int l,int m,int r){
    long long res=0;
    int n1=m-l+1,n2=r-m;
    long long a1[n1],a2[n2];
    for(int i=0;i<n1;i++)
        a1[i]=arr[l+i];
    for(int i=0;i<n2;i++)
        a2[i]=arr[m+1+i];
    int i=0,j=0,k=l;
    while(i<n1 && j<n2){
        if(a1[i]<=a2[j]){
            arr[k]=a1[i];
            i++;
            k++;
        }
        else{
            arr[k]=a2[j];
            res+=(n1-i);
            j++;
            k++;
        }
    }
    while(i<n1)
        arr[k++]=a1[i++];
    
    while(j<n2)
        arr[k++]=a2[j++];
    return res;
}
long long mergeSort(long long *arr,int l,int r){
    long long inv=0;
    if(l<r){
        int mid=(l+r)/2;
        inv+= mergeSort(arr,l,mid);
        inv+= mergeSort(arr,mid+1,r);
        inv+=merge(arr,l,mid,r);
        
    }
    return inv;
    
    
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    int l=0,r=n-1;
    long long res=mergeSort(arr,l,r);
    return res;
}
