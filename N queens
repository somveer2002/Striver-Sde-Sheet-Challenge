class Solution {
public:
    void solve(int col,vector<string> &t,vector<vector<string>> &res,int n,vector<int> &left,vector<int> &topLeft,vector<int> &bottomLeft){
        if(col==n){
            res.push_back(t);
            return;
        }
        for(int row=0;row<n;row++){
            if(left[row]==0 && topLeft[n-1+(col-row)]==0 && bottomLeft[row+col]==0){
                t[row][col]='Q';
                left[row]=1;
                topLeft[n-1+(col-row)]=1;
                bottomLeft[row+col]=1;
                solve(col+1,t,res,n,left,topLeft,bottomLeft);
                t[row][col]='.';
                left[row]=0;
                topLeft[n-1+(col-row)]=0;
                bottomLeft[row+col]=0;
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> t(n);
        string s(n,'.');
        vector<int> left(n,0),topLeft(2*n-1,0),bottomLeft(2*n-1,0);
        for(int i=0;i<n;i++){
            t[i]=s;
        }
        solve(0,t,res,n,left,topLeft,bottomLeft);
        return res;
    }
};
