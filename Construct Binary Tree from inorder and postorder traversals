TreeNode<int>* buildTree(vector<int> &,int,int,vector<int> &,int,int ,unordered_map<int,int> &);
TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
    int n=inOrder.size();
    unordered_map<int,int> mp;
    for(int i=0;i<n;i++)
        mp[inOrder[i]]=i;
    TreeNode<int>* root=buildTree(inOrder,0,n-1,postOrder,0,n-1,mp);
    return root;
    
	// Write your code here.
}
TreeNode<int>* buildTree(vector<int> &inorder,int inStart,int inEnd,vector<int> & postorder,int postStart,int postEnd,unordered_map<int,int> &mp){
    if(inStart>inEnd || postStart>postEnd)
        return NULL;
    TreeNode<int>* root=new TreeNode<int>(postorder[postEnd]);
    int inRoot=mp[root->data];
    int leftSize=inRoot-inStart;
    root->left=buildTree(inorder,inStart,inRoot-1,postorder,postStart,postStart+leftSize-1,mp);
    root->right=buildTree(inorder,inRoot+1,inEnd,postorder,postStart+leftSize,postEnd-1,mp);
    return root;
}
