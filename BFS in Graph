#include<bits/stdc++.h>
// struct myComp{
//   bool operator()(pair<int,int> &p1,pair<int,int> &p2){
//       if(p1.first==p2.first)
//           return p2.second>p1.second;
//       return p1.first>p2.first;
//   }  
// };
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
//     sort(edges.begin(),edges.end(),myComp());
    vector<int> graph[vertex],bfs,vis(vertex,0);
    for(int i=0;i<edges.size();i++){
        graph[edges[i].first].push_back(edges[i].second);
        graph[edges[i].second].push_back(edges[i].first);
    }
        
    for(int i=0;i<vertex;i++)
        sort(graph[i].begin(),graph[i].end());
    for(int i=0;i<vertex;i++){
        if(vis[i]==0){
            queue<int> q;
            q.push(i);
            vis[i]=1;
            while(!q.empty()){
                int node=q.front();
                q.pop();
                bfs.push_back(node);
                
                for(auto x:graph[node]){
                    if(vis[x]==0){
                        q.push(x);
                        vis[x]=1;
                    }
                }
            }
        }
    }
    return bfs;
    
    // Write your code here
}
