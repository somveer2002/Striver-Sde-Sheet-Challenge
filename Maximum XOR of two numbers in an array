#include<bits/stdc++.h>
struct Node{
    Node *links[2];
    bool containsKey(int i){
        return (links[i]!=NULL);
    }
    Node *get(int i){
        return links[i];
    }
    void put(int i,Node* node){
        links[i]=node;
    }
};
class Trie{
    Node *root;
    public :
    Trie(){
        root=new Node();
    }
    void insert(int n){
        Node *node=root;
        for(int i=31;i>=0;i--){
            int bit=(n>>i)&1;
            if(!node->containsKey(bit))
                node->put(bit,new Node());
            node=node->get(bit);
        }
    }
    int findMax(int n){
        Node* node=root;
        int maxNum=0;
        for(int i=31;i>=0;i--){
            int bit=(n>>i)&1;
            if(node->containsKey(!bit)){
                maxNum=maxNum|(1<<i);
                node=node->get(!bit);
            }
            else{
                node=node->get(bit);    
            }
        }
        return maxNum;
    }
};
int maximumXor(vector<int> A)
{
    // Write your code here.  
    int n=A.size();
    Trie trie;
    for(int i=0;i<n;i++){
        trie.insert(A[i]);
    }
    int maxi=0;
    for(int i=0;i<n;i++)
        maxi=max(maxi,trie.findMax(A[i]));
    return maxi;
   
}
