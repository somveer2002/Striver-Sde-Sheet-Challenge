#include<bits/stdc++.h>
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Write your code here.
    vector<pair<int,int>> adj[vertices];
    for(int i=0;i<edges;i++){
        adj[vec[i][0]].push_back({vec[i][1],vec[i][2]});
        adj[vec[i][1]].push_back({vec[i][0],vec[i][2]});
    }
    vector<int> dist(vertices,INT_MAX);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    dist[source]=0;
    pq.push({0,source});
    while(!pq.empty()){
        int node=pq.top().second;
        int s_nDist=pq.top().first;
        pq.pop();
        for(auto x:adj[node]){
            if((s_nDist + x.second) < dist[x.first]){
                dist[x.first]=s_nDist+x.second;
                pq.push({dist[x.first],x.first});
            }
        }
    }
    return dist;
}
