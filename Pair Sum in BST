
#include<bits/stdc++.h>

/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
class BSTIterator{
    public:
    stack<BinaryTreeNode<int> *> st;
    bool reverse=true;
    void pushAll(BinaryTreeNode<int> *root,int reverse){
        BinaryTreeNode<int>* node=root;
        while(node){
            st.push(node);
            if(reverse)
                node=node->right;
            else
                node=node->left;
                
        }
    }
    BSTIterator(BinaryTreeNode<int> *root,int rev){
        reverse=rev;
        pushAll(root,reverse);
            
    }
    int next(){
        BinaryTreeNode<int>* node=st.top();
        st.pop();
        int res=node->data;
        if(reverse) pushAll(node->left,reverse);
        else pushAll(node->right,reverse);
        return res;
            
    }
};
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    if(root==NULL) return false;
    BSTIterator l(root,false);
    BSTIterator r(root,true);
    int l_value=l.next();
    int r_value=r.next();
    while(l_value<r_value){
        if(l_value + r_value == k)
            return true;
        else if(l_value + r_value < k)
            l_value=l.next();
        else
            r_value=r.next();
    }
    return false;
    
    
    
    
    
    
    // Write your code here
}
